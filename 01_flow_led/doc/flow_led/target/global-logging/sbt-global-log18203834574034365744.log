[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\liyueqiang\AppData\Local\Temp\idea.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\liyueqiang\AppData\Local\Temp\idea.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.5.5 (Oracle Corporation Java 17.0.6)
[debug] Load.defaultLoad until apply took 338.2616ms
[debug]           Load.loadUnit: plugins took 62.4109ms
[debug]           Load.loadUnit: defsScala took 0.3024ms
[debug] [Loading] Scanning directory E:\FPGA\fpga_study\01_flow_led\doc\flow_led\project
[debug]             Load.loadUnit: mkEval took 26.0054ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in E:\FPGA\fpga_study\01_flow_led\doc\flow_led\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 12.0786 ms
[info] loading settings for project flow_led-build from idea.sbt ...
[debug]               Load.resolveProject(flow_led-build) took 42.2654ms
[debug]             Load.loadTransitive: finalizeProject(Project(id flow_led-build, base: E:\FPGA\fpga_study\01_flow_led\doc\flow_led\project, plugins: List(<none>))) took 60.9164ms
[debug] [Loading] Done in E:\FPGA\fpga_study\01_flow_led\doc\flow_led\project, returning: (flow_led-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 1976.2687ms
[debug]           Load.loadUnit: cleanEvalClasses took 5.803ms
[debug]         Load.loadUnit(file:/E:/FPGA/fpga_study/01_flow_led/doc/flow_led/project/, ...) took 2049.8257ms
[debug]       Load.apply: load took 2143.0024ms
[debug]       Load.apply: resolveProjects took 4.2757ms
[debug]       Load.apply: finalTransforms took 40.9911ms
[debug]       Load.apply: config.delegates took 5.4145ms
[debug]       Load.apply: Def.make(settings)... took 261.9195ms
[debug]       Load.apply: structureIndex took 72.0358ms
[debug]       Load.apply: mkStreams took 1.1408ms
[info] loading project definition from E:\FPGA\fpga_study\01_flow_led\doc\flow_led\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug]     Load.loadUnit: plugins took 4485.7269ms
[debug]     Load.loadUnit: defsScala took 0.0028ms
[debug] [Loading] Scanning directory E:\FPGA\fpga_study\01_flow_led\doc\flow_led
[debug]       Load.loadUnit: mkEval took 0.2156ms
[debug] [Loading] Found root project mylib w/ remaining 
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 1.5596 ms
[info] loading settings for project mylib from build.sbt ...
[debug]         Load.resolveProject(mylib) took 21.5758ms
[debug]       Load.loadTransitive: finalizeProject(Project(id mylib, base: E:\FPGA\fpga_study\01_flow_led\doc\flow_led, plugins: List(<none>))) took 24.4301ms
[debug] [Loading] Done in E:\FPGA\fpga_study\01_flow_led\doc\flow_led, returning: (mylib)
[debug]     Load.loadUnit: loadedProjectsRaw took 1008.3091ms
[debug]     Load.loadUnit: cleanEvalClasses took 14.3981ms
[debug]   Load.loadUnit(file:/E:/FPGA/fpga_study/01_flow_led/doc/flow_led/, ...) took 5509.7914ms
[debug] Load.apply: load took 5526.9189ms
[debug] Load.apply: resolveProjects took 0.0867ms
[debug] Load.apply: finalTransforms took 19.6718ms
[debug] Load.apply: config.delegates took 0.31ms
[debug] Load.apply: Def.make(settings)... took 58.8937ms
[debug] Load.apply: structureIndex took 23.3197ms
[debug] Load.apply: mkStreams took 0.0019ms
[info] set current project to test (in build file:/E:/FPGA/fpga_study/01_flow_led/doc/flow_led/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 62223 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 62223, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to test (in build file:/E:/FPGA/fpga_study/01_flow_led/doc/flow_led/)
[debug] > Exec(idea-shell, None, None)
